// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: my.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from my.proto</summary>
public static partial class MyReflection {

  #region Descriptor
  /// <summary>File descriptor for my.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MyReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CghteS5wcm90byJACghQbGF5Q2FyZBIYCgRuYW1lGAEgASgOMgouQ0FSRF9O",
          "QU1FEhoKBWNvbG9yGAIgASgOMgsuQ0FSRF9DT0xPUiIrCgREZWFsEgwKBGRl",
          "YWwYASABKAUSFQoFdHJ1bXAYAiABKA4yBi5UUlVNUCKRAQoJUGxheWVyTXNn",
          "EisKC3R5cGVNZXNzYWdlGAEgASgOMhYuUGxheWVyTXNnLlR5cGVNZXNzYWdl",
          "EhsKCHBsYXlDYXJkGAIgASgLMgkuUGxheUNhcmQSEwoEZGVhbBgDIAEoCzIF",
          "LkRlYWwiJQoLVHlwZU1lc3NhZ2USDAoIUExBWUNBUkQQABIICgRERUFMEAEi",
          "TwoKRGVhbFdpbm5lchIOCgZwbGF5ZXIYASABKAUSDAoEdGVhbRgCIAEoBRIV",
          "CgV0cnVtcBgDIAEoDjIGLlRSVU1QEgwKBGRlYWwYBCABKAUiYAoKUGxheWVk",
          "Q2FyZBIYCgRuYW1lGAEgASgOMgouQ0FSRF9OQU1FEhoKBWNvbG9yGAIgASgO",
          "MgsuQ0FSRF9DT0xPUhIOCgZwbGF5ZXIYAyABKAUSDAoEdGVhbRgEIAEoBSIk",
          "ChBBY3Rpb25WYWxpZGF0aW9uEhAKCGFjY2VwdGVkGAEgASgIIlkKCkdhbWVX",
          "aW5uZXISEgoKdGVhbTFTY29yZRgBIAEoBRISCgp0ZWFtMlNjb3JlGAIgASgF",
          "EhIKCmRlYWxlclRlYW0YAyABKAUSDwoHd2luRGVhbBgEIAEoCCJACghEcmF3",
          "Q2FyZBIYCgRuYW1lGAEgASgOMgouQ0FSRF9OQU1FEhoKBWNvbG9yGAIgASgO",
          "MgsuQ0FSRF9DT0xPUiI6CgtTdGFja1dpbm5lchIMCgR0ZWFtGAEgASgFEg4K",
          "BnBsYXllchgCIAEoBRINCgVzY29yZRgDIAEoBSJRCgxQbGF5ZXJEZWFsZWQS",
          "DgoGcGxheWVyGAEgASgFEgwKBHRlYW0YAiABKAUSDAoEZGVhbBgDIAEoBRIV",
          "CgV0cnVtcBgEIAEoDjIGLlRSVU1QIpgBCgtQbGF5ZXJTdGF0ZRIhCgVzdGF0",
          "ZRgBIAEoDjISLlBsYXllclN0YXRlLlN0YXRlEgwKBHRlYW0YAiABKAUSDgoG",
          "UGxheWVyGAMgASgFIkgKBVN0YXRlEg8KC1dBSVRJTkdHQU1FEAASCwoHUExB",
          "WUlORxABEgwKCFlPVVJUVVJOEAISCQoFTEVBVkUQAxIICgRERUFMEAQi4AMK",
          "CVNlcnZlck1zZxIrCgt0eXBlTWVzc2FnZRgBIAEoDjIWLlNlcnZlck1zZy5U",
          "eXBlTWVzc2FnZRIfCgpkZWFsV2lubmVyGAIgASgLMgsuRGVhbFdpbm5lchIf",
          "CgpwbGF5ZWRDYXJkGAMgASgLMgsuUGxheWVkQ2FyZBIrChBhY3Rpb25WYWxp",
          "ZGF0aW9uGAQgASgLMhEuQWN0aW9uVmFsaWRhdGlvbhIbCgZ3aW5uZXIYBSAB",
          "KAsyCy5HYW1lV2lubmVyEhsKCGRyYXdDYXJkGAYgASgLMgkuRHJhd0NhcmQS",
          "IQoLc3RhY2tXaW5uZXIYByABKAsyDC5TdGFja1dpbm5lchIhCgtwbGF5ZXJT",
          "dGF0ZRgIIAEoCzIMLlBsYXllclN0YXRlEiMKDHBsYXllckRlYWxlZBgJIAEo",
          "CzINLlBsYXllckRlYWxlZCKRAQoLVHlwZU1lc3NhZ2USDgoKREVBTFdJTk5F",
          "UhAAEg4KClBMQVlFRENBUkQQARIUChBBQ1RJT05WQUxJREFUSU9OEAISCgoG",
          "V0lOTkVSEAMSDAoIRFJBV0NBUkQQBBIPCgtTVEFDS1dJTk5FUhAFEg8KC1BM",
          "QVlFUlNUQVRFEAYSEAoMUExBWUVSREVBTEVEEAcqTgoFVFJVTVASCQoFVE5P",
          "TkUQABIKCgZUU1BBREUQARILCgdUSEVBUlRIEAISDAoIVERJQU1PTkQQAxIJ",
          "CgVUQ0xVQhAEEggKBFRBTEwQBSo6CgpDQVJEX0NPTE9SEgkKBVNQQURFEAAS",
          "CgoGSEVBUlRIEAESCwoHRElBTU9ORBACEggKBENMVUIQAypdCglDQVJEX05B",
          "TUUSBwoDQUNFEAASCQoFU0VWRU4QARIKCgZIRUlHSFQQAhIICgROSU5FEAMS",
          "BwoDVEVOEAQSCAoESkFDSxAFEgkKBVFVRUVOEAYSCAoES0lORxAHQhAKAEIM",
          "Y29pbmNoZVByb3RvYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TRUMP), typeof(global::CARD_COLOR), typeof(global::CARD_NAME), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayCard), global::PlayCard.Parser, new[]{ "Name", "Color" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Deal), global::Deal.Parser, new[]{ "Deal_", "Trump" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerMsg), global::PlayerMsg.Parser, new[]{ "TypeMessage", "PlayCard", "Deal" }, null, new[]{ typeof(global::PlayerMsg.Types.TypeMessage) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DealWinner), global::DealWinner.Parser, new[]{ "Player", "Team", "Trump", "Deal" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayedCard), global::PlayedCard.Parser, new[]{ "Name", "Color", "Player", "Team" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ActionValidation), global::ActionValidation.Parser, new[]{ "Accepted" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GameWinner), global::GameWinner.Parser, new[]{ "Team1Score", "Team2Score", "DealerTeam", "WinDeal" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DrawCard), global::DrawCard.Parser, new[]{ "Name", "Color" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StackWinner), global::StackWinner.Parser, new[]{ "Team", "Player", "Score" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerDealed), global::PlayerDealed.Parser, new[]{ "Player", "Team", "Deal", "Trump" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerState), global::PlayerState.Parser, new[]{ "State", "Team", "Player" }, null, new[]{ typeof(global::PlayerState.Types.State) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServerMsg), global::ServerMsg.Parser, new[]{ "TypeMessage", "DealWinner", "PlayedCard", "ActionValidation", "Winner", "DrawCard", "StackWinner", "PlayerState", "PlayerDealed" }, null, new[]{ typeof(global::ServerMsg.Types.TypeMessage) }, null)
        }));
  }
  #endregion

}
#region Enums
public enum TRUMP {
  [pbr::OriginalName("TNONE")] Tnone = 0,
  [pbr::OriginalName("TSPADE")] Tspade = 1,
  [pbr::OriginalName("THEARTH")] Thearth = 2,
  [pbr::OriginalName("TDIAMOND")] Tdiamond = 3,
  [pbr::OriginalName("TCLUB")] Tclub = 4,
  [pbr::OriginalName("TALL")] Tall = 5,
}

public enum CARD_COLOR {
  [pbr::OriginalName("SPADE")] Spade = 0,
  [pbr::OriginalName("HEARTH")] Hearth = 1,
  [pbr::OriginalName("DIAMOND")] Diamond = 2,
  [pbr::OriginalName("CLUB")] Club = 3,
}

public enum CARD_NAME {
  [pbr::OriginalName("ACE")] Ace = 0,
  [pbr::OriginalName("SEVEN")] Seven = 1,
  [pbr::OriginalName("HEIGHT")] Height = 2,
  [pbr::OriginalName("NINE")] Nine = 3,
  [pbr::OriginalName("TEN")] Ten = 4,
  [pbr::OriginalName("JACK")] Jack = 5,
  [pbr::OriginalName("QUEEN")] Queen = 6,
  [pbr::OriginalName("KING")] King = 7,
}

#endregion

#region Messages
/// <summary>
/// Player CMD
/// </summary>
public sealed partial class PlayCard : pb::IMessage<PlayCard> {
  private static readonly pb::MessageParser<PlayCard> _parser = new pb::MessageParser<PlayCard>(() => new PlayCard());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayCard> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MyReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayCard() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayCard(PlayCard other) : this() {
    name_ = other.name_;
    color_ = other.color_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayCard Clone() {
    return new PlayCard(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private global::CARD_NAME name_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CARD_NAME Name {
    get { return name_; }
    set {
      name_ = value;
    }
  }

  /// <summary>Field number for the "color" field.</summary>
  public const int ColorFieldNumber = 2;
  private global::CARD_COLOR color_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CARD_COLOR Color {
    get { return color_; }
    set {
      color_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayCard);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayCard other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Color != other.Color) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name != 0) hash ^= Name.GetHashCode();
    if (Color != 0) hash ^= Color.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Name);
    }
    if (Color != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Color);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Name);
    }
    if (Color != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayCard other) {
    if (other == null) {
      return;
    }
    if (other.Name != 0) {
      Name = other.Name;
    }
    if (other.Color != 0) {
      Color = other.Color;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          name_ = (global::CARD_NAME) input.ReadEnum();
          break;
        }
        case 16: {
          color_ = (global::CARD_COLOR) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class Deal : pb::IMessage<Deal> {
  private static readonly pb::MessageParser<Deal> _parser = new pb::MessageParser<Deal>(() => new Deal());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Deal> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MyReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Deal() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Deal(Deal other) : this() {
    deal_ = other.deal_;
    trump_ = other.trump_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Deal Clone() {
    return new Deal(this);
  }

  /// <summary>Field number for the "deal" field.</summary>
  public const int Deal_FieldNumber = 1;
  private int deal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Deal_ {
    get { return deal_; }
    set {
      deal_ = value;
    }
  }

  /// <summary>Field number for the "trump" field.</summary>
  public const int TrumpFieldNumber = 2;
  private global::TRUMP trump_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TRUMP Trump {
    get { return trump_; }
    set {
      trump_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Deal);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Deal other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Deal_ != other.Deal_) return false;
    if (Trump != other.Trump) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Deal_ != 0) hash ^= Deal_.GetHashCode();
    if (Trump != 0) hash ^= Trump.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Deal_ != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Deal_);
    }
    if (Trump != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Trump);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Deal_ != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deal_);
    }
    if (Trump != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Trump);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Deal other) {
    if (other == null) {
      return;
    }
    if (other.Deal_ != 0) {
      Deal_ = other.Deal_;
    }
    if (other.Trump != 0) {
      Trump = other.Trump;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Deal_ = input.ReadInt32();
          break;
        }
        case 16: {
          trump_ = (global::TRUMP) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Msg encapsulation
/// </summary>
public sealed partial class PlayerMsg : pb::IMessage<PlayerMsg> {
  private static readonly pb::MessageParser<PlayerMsg> _parser = new pb::MessageParser<PlayerMsg>(() => new PlayerMsg());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MyReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerMsg(PlayerMsg other) : this() {
    typeMessage_ = other.typeMessage_;
    PlayCard = other.playCard_ != null ? other.PlayCard.Clone() : null;
    Deal = other.deal_ != null ? other.Deal.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerMsg Clone() {
    return new PlayerMsg(this);
  }

  /// <summary>Field number for the "typeMessage" field.</summary>
  public const int TypeMessageFieldNumber = 1;
  private global::PlayerMsg.Types.TypeMessage typeMessage_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerMsg.Types.TypeMessage TypeMessage {
    get { return typeMessage_; }
    set {
      typeMessage_ = value;
    }
  }

  /// <summary>Field number for the "playCard" field.</summary>
  public const int PlayCardFieldNumber = 2;
  private global::PlayCard playCard_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayCard PlayCard {
    get { return playCard_; }
    set {
      playCard_ = value;
    }
  }

  /// <summary>Field number for the "deal" field.</summary>
  public const int DealFieldNumber = 3;
  private global::Deal deal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Deal Deal {
    get { return deal_; }
    set {
      deal_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TypeMessage != other.TypeMessage) return false;
    if (!object.Equals(PlayCard, other.PlayCard)) return false;
    if (!object.Equals(Deal, other.Deal)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TypeMessage != 0) hash ^= TypeMessage.GetHashCode();
    if (playCard_ != null) hash ^= PlayCard.GetHashCode();
    if (deal_ != null) hash ^= Deal.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TypeMessage != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) TypeMessage);
    }
    if (playCard_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PlayCard);
    }
    if (deal_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Deal);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TypeMessage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TypeMessage);
    }
    if (playCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayCard);
    }
    if (deal_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deal);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerMsg other) {
    if (other == null) {
      return;
    }
    if (other.TypeMessage != 0) {
      TypeMessage = other.TypeMessage;
    }
    if (other.playCard_ != null) {
      if (playCard_ == null) {
        playCard_ = new global::PlayCard();
      }
      PlayCard.MergeFrom(other.PlayCard);
    }
    if (other.deal_ != null) {
      if (deal_ == null) {
        deal_ = new global::Deal();
      }
      Deal.MergeFrom(other.Deal);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          typeMessage_ = (global::PlayerMsg.Types.TypeMessage) input.ReadEnum();
          break;
        }
        case 18: {
          if (playCard_ == null) {
            playCard_ = new global::PlayCard();
          }
          input.ReadMessage(playCard_);
          break;
        }
        case 26: {
          if (deal_ == null) {
            deal_ = new global::Deal();
          }
          input.ReadMessage(deal_);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the PlayerMsg message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum TypeMessage {
      [pbr::OriginalName("PLAYCARD")] Playcard = 0,
      [pbr::OriginalName("DEAL")] Deal = 1,
    }

  }
  #endregion

}

/// <summary>
/// Server CMD
/// </summary>
public sealed partial class DealWinner : pb::IMessage<DealWinner> {
  private static readonly pb::MessageParser<DealWinner> _parser = new pb::MessageParser<DealWinner>(() => new DealWinner());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DealWinner> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MyReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DealWinner() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DealWinner(DealWinner other) : this() {
    player_ = other.player_;
    team_ = other.team_;
    trump_ = other.trump_;
    deal_ = other.deal_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DealWinner Clone() {
    return new DealWinner(this);
  }

  /// <summary>Field number for the "player" field.</summary>
  public const int PlayerFieldNumber = 1;
  private int player_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Player {
    get { return player_; }
    set {
      player_ = value;
    }
  }

  /// <summary>Field number for the "team" field.</summary>
  public const int TeamFieldNumber = 2;
  private int team_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Team {
    get { return team_; }
    set {
      team_ = value;
    }
  }

  /// <summary>Field number for the "trump" field.</summary>
  public const int TrumpFieldNumber = 3;
  private global::TRUMP trump_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TRUMP Trump {
    get { return trump_; }
    set {
      trump_ = value;
    }
  }

  /// <summary>Field number for the "deal" field.</summary>
  public const int DealFieldNumber = 4;
  private int deal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Deal {
    get { return deal_; }
    set {
      deal_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DealWinner);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DealWinner other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Player != other.Player) return false;
    if (Team != other.Team) return false;
    if (Trump != other.Trump) return false;
    if (Deal != other.Deal) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Player != 0) hash ^= Player.GetHashCode();
    if (Team != 0) hash ^= Team.GetHashCode();
    if (Trump != 0) hash ^= Trump.GetHashCode();
    if (Deal != 0) hash ^= Deal.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Player != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Player);
    }
    if (Team != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Team);
    }
    if (Trump != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Trump);
    }
    if (Deal != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Deal);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Player != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
    }
    if (Team != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
    }
    if (Trump != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Trump);
    }
    if (Deal != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deal);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DealWinner other) {
    if (other == null) {
      return;
    }
    if (other.Player != 0) {
      Player = other.Player;
    }
    if (other.Team != 0) {
      Team = other.Team;
    }
    if (other.Trump != 0) {
      Trump = other.Trump;
    }
    if (other.Deal != 0) {
      Deal = other.Deal;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Player = input.ReadInt32();
          break;
        }
        case 16: {
          Team = input.ReadInt32();
          break;
        }
        case 24: {
          trump_ = (global::TRUMP) input.ReadEnum();
          break;
        }
        case 32: {
          Deal = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayedCard : pb::IMessage<PlayedCard> {
  private static readonly pb::MessageParser<PlayedCard> _parser = new pb::MessageParser<PlayedCard>(() => new PlayedCard());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayedCard> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MyReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayedCard() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayedCard(PlayedCard other) : this() {
    name_ = other.name_;
    color_ = other.color_;
    player_ = other.player_;
    team_ = other.team_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayedCard Clone() {
    return new PlayedCard(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private global::CARD_NAME name_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CARD_NAME Name {
    get { return name_; }
    set {
      name_ = value;
    }
  }

  /// <summary>Field number for the "color" field.</summary>
  public const int ColorFieldNumber = 2;
  private global::CARD_COLOR color_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CARD_COLOR Color {
    get { return color_; }
    set {
      color_ = value;
    }
  }

  /// <summary>Field number for the "player" field.</summary>
  public const int PlayerFieldNumber = 3;
  private int player_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Player {
    get { return player_; }
    set {
      player_ = value;
    }
  }

  /// <summary>Field number for the "team" field.</summary>
  public const int TeamFieldNumber = 4;
  private int team_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Team {
    get { return team_; }
    set {
      team_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayedCard);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayedCard other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Color != other.Color) return false;
    if (Player != other.Player) return false;
    if (Team != other.Team) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name != 0) hash ^= Name.GetHashCode();
    if (Color != 0) hash ^= Color.GetHashCode();
    if (Player != 0) hash ^= Player.GetHashCode();
    if (Team != 0) hash ^= Team.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Name);
    }
    if (Color != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Color);
    }
    if (Player != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Player);
    }
    if (Team != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Team);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Name);
    }
    if (Color != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
    }
    if (Player != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
    }
    if (Team != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayedCard other) {
    if (other == null) {
      return;
    }
    if (other.Name != 0) {
      Name = other.Name;
    }
    if (other.Color != 0) {
      Color = other.Color;
    }
    if (other.Player != 0) {
      Player = other.Player;
    }
    if (other.Team != 0) {
      Team = other.Team;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          name_ = (global::CARD_NAME) input.ReadEnum();
          break;
        }
        case 16: {
          color_ = (global::CARD_COLOR) input.ReadEnum();
          break;
        }
        case 24: {
          Player = input.ReadInt32();
          break;
        }
        case 32: {
          Team = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ActionValidation : pb::IMessage<ActionValidation> {
  private static readonly pb::MessageParser<ActionValidation> _parser = new pb::MessageParser<ActionValidation>(() => new ActionValidation());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ActionValidation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MyReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActionValidation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActionValidation(ActionValidation other) : this() {
    accepted_ = other.accepted_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActionValidation Clone() {
    return new ActionValidation(this);
  }

  /// <summary>Field number for the "accepted" field.</summary>
  public const int AcceptedFieldNumber = 1;
  private bool accepted_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Accepted {
    get { return accepted_; }
    set {
      accepted_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ActionValidation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ActionValidation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Accepted != other.Accepted) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Accepted != false) hash ^= Accepted.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Accepted != false) {
      output.WriteRawTag(8);
      output.WriteBool(Accepted);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Accepted != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ActionValidation other) {
    if (other == null) {
      return;
    }
    if (other.Accepted != false) {
      Accepted = other.Accepted;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Accepted = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class GameWinner : pb::IMessage<GameWinner> {
  private static readonly pb::MessageParser<GameWinner> _parser = new pb::MessageParser<GameWinner>(() => new GameWinner());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GameWinner> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MyReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameWinner() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameWinner(GameWinner other) : this() {
    team1Score_ = other.team1Score_;
    team2Score_ = other.team2Score_;
    dealerTeam_ = other.dealerTeam_;
    winDeal_ = other.winDeal_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameWinner Clone() {
    return new GameWinner(this);
  }

  /// <summary>Field number for the "team1Score" field.</summary>
  public const int Team1ScoreFieldNumber = 1;
  private int team1Score_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Team1Score {
    get { return team1Score_; }
    set {
      team1Score_ = value;
    }
  }

  /// <summary>Field number for the "team2Score" field.</summary>
  public const int Team2ScoreFieldNumber = 2;
  private int team2Score_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Team2Score {
    get { return team2Score_; }
    set {
      team2Score_ = value;
    }
  }

  /// <summary>Field number for the "dealerTeam" field.</summary>
  public const int DealerTeamFieldNumber = 3;
  private int dealerTeam_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DealerTeam {
    get { return dealerTeam_; }
    set {
      dealerTeam_ = value;
    }
  }

  /// <summary>Field number for the "winDeal" field.</summary>
  public const int WinDealFieldNumber = 4;
  private bool winDeal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool WinDeal {
    get { return winDeal_; }
    set {
      winDeal_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GameWinner);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GameWinner other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Team1Score != other.Team1Score) return false;
    if (Team2Score != other.Team2Score) return false;
    if (DealerTeam != other.DealerTeam) return false;
    if (WinDeal != other.WinDeal) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Team1Score != 0) hash ^= Team1Score.GetHashCode();
    if (Team2Score != 0) hash ^= Team2Score.GetHashCode();
    if (DealerTeam != 0) hash ^= DealerTeam.GetHashCode();
    if (WinDeal != false) hash ^= WinDeal.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Team1Score != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Team1Score);
    }
    if (Team2Score != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Team2Score);
    }
    if (DealerTeam != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(DealerTeam);
    }
    if (WinDeal != false) {
      output.WriteRawTag(32);
      output.WriteBool(WinDeal);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Team1Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team1Score);
    }
    if (Team2Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team2Score);
    }
    if (DealerTeam != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DealerTeam);
    }
    if (WinDeal != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GameWinner other) {
    if (other == null) {
      return;
    }
    if (other.Team1Score != 0) {
      Team1Score = other.Team1Score;
    }
    if (other.Team2Score != 0) {
      Team2Score = other.Team2Score;
    }
    if (other.DealerTeam != 0) {
      DealerTeam = other.DealerTeam;
    }
    if (other.WinDeal != false) {
      WinDeal = other.WinDeal;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Team1Score = input.ReadInt32();
          break;
        }
        case 16: {
          Team2Score = input.ReadInt32();
          break;
        }
        case 24: {
          DealerTeam = input.ReadInt32();
          break;
        }
        case 32: {
          WinDeal = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class DrawCard : pb::IMessage<DrawCard> {
  private static readonly pb::MessageParser<DrawCard> _parser = new pb::MessageParser<DrawCard>(() => new DrawCard());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DrawCard> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MyReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawCard() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawCard(DrawCard other) : this() {
    name_ = other.name_;
    color_ = other.color_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DrawCard Clone() {
    return new DrawCard(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private global::CARD_NAME name_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CARD_NAME Name {
    get { return name_; }
    set {
      name_ = value;
    }
  }

  /// <summary>Field number for the "color" field.</summary>
  public const int ColorFieldNumber = 2;
  private global::CARD_COLOR color_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CARD_COLOR Color {
    get { return color_; }
    set {
      color_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DrawCard);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DrawCard other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Color != other.Color) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name != 0) hash ^= Name.GetHashCode();
    if (Color != 0) hash ^= Color.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Name);
    }
    if (Color != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Color);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Name);
    }
    if (Color != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Color);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DrawCard other) {
    if (other == null) {
      return;
    }
    if (other.Name != 0) {
      Name = other.Name;
    }
    if (other.Color != 0) {
      Color = other.Color;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          name_ = (global::CARD_NAME) input.ReadEnum();
          break;
        }
        case 16: {
          color_ = (global::CARD_COLOR) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class StackWinner : pb::IMessage<StackWinner> {
  private static readonly pb::MessageParser<StackWinner> _parser = new pb::MessageParser<StackWinner>(() => new StackWinner());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StackWinner> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MyReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StackWinner() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StackWinner(StackWinner other) : this() {
    team_ = other.team_;
    player_ = other.player_;
    score_ = other.score_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StackWinner Clone() {
    return new StackWinner(this);
  }

  /// <summary>Field number for the "team" field.</summary>
  public const int TeamFieldNumber = 1;
  private int team_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Team {
    get { return team_; }
    set {
      team_ = value;
    }
  }

  /// <summary>Field number for the "player" field.</summary>
  public const int PlayerFieldNumber = 2;
  private int player_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Player {
    get { return player_; }
    set {
      player_ = value;
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 3;
  private int score_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StackWinner);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StackWinner other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Team != other.Team) return false;
    if (Player != other.Player) return false;
    if (Score != other.Score) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Team != 0) hash ^= Team.GetHashCode();
    if (Player != 0) hash ^= Player.GetHashCode();
    if (Score != 0) hash ^= Score.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Team != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Team);
    }
    if (Player != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Player);
    }
    if (Score != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Score);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Team != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
    }
    if (Player != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
    }
    if (Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StackWinner other) {
    if (other == null) {
      return;
    }
    if (other.Team != 0) {
      Team = other.Team;
    }
    if (other.Player != 0) {
      Player = other.Player;
    }
    if (other.Score != 0) {
      Score = other.Score;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Team = input.ReadInt32();
          break;
        }
        case 16: {
          Player = input.ReadInt32();
          break;
        }
        case 24: {
          Score = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerDealed : pb::IMessage<PlayerDealed> {
  private static readonly pb::MessageParser<PlayerDealed> _parser = new pb::MessageParser<PlayerDealed>(() => new PlayerDealed());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerDealed> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MyReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerDealed() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerDealed(PlayerDealed other) : this() {
    player_ = other.player_;
    team_ = other.team_;
    deal_ = other.deal_;
    trump_ = other.trump_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerDealed Clone() {
    return new PlayerDealed(this);
  }

  /// <summary>Field number for the "player" field.</summary>
  public const int PlayerFieldNumber = 1;
  private int player_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Player {
    get { return player_; }
    set {
      player_ = value;
    }
  }

  /// <summary>Field number for the "team" field.</summary>
  public const int TeamFieldNumber = 2;
  private int team_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Team {
    get { return team_; }
    set {
      team_ = value;
    }
  }

  /// <summary>Field number for the "deal" field.</summary>
  public const int DealFieldNumber = 3;
  private int deal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Deal {
    get { return deal_; }
    set {
      deal_ = value;
    }
  }

  /// <summary>Field number for the "trump" field.</summary>
  public const int TrumpFieldNumber = 4;
  private global::TRUMP trump_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TRUMP Trump {
    get { return trump_; }
    set {
      trump_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerDealed);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerDealed other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Player != other.Player) return false;
    if (Team != other.Team) return false;
    if (Deal != other.Deal) return false;
    if (Trump != other.Trump) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Player != 0) hash ^= Player.GetHashCode();
    if (Team != 0) hash ^= Team.GetHashCode();
    if (Deal != 0) hash ^= Deal.GetHashCode();
    if (Trump != 0) hash ^= Trump.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Player != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Player);
    }
    if (Team != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Team);
    }
    if (Deal != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Deal);
    }
    if (Trump != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Trump);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Player != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
    }
    if (Team != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
    }
    if (Deal != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deal);
    }
    if (Trump != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Trump);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerDealed other) {
    if (other == null) {
      return;
    }
    if (other.Player != 0) {
      Player = other.Player;
    }
    if (other.Team != 0) {
      Team = other.Team;
    }
    if (other.Deal != 0) {
      Deal = other.Deal;
    }
    if (other.Trump != 0) {
      Trump = other.Trump;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Player = input.ReadInt32();
          break;
        }
        case 16: {
          Team = input.ReadInt32();
          break;
        }
        case 24: {
          Deal = input.ReadInt32();
          break;
        }
        case 32: {
          trump_ = (global::TRUMP) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerState : pb::IMessage<PlayerState> {
  private static readonly pb::MessageParser<PlayerState> _parser = new pb::MessageParser<PlayerState>(() => new PlayerState());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MyReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerState(PlayerState other) : this() {
    state_ = other.state_;
    team_ = other.team_;
    player_ = other.player_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerState Clone() {
    return new PlayerState(this);
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 1;
  private global::PlayerState.Types.State state_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerState.Types.State State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "team" field.</summary>
  public const int TeamFieldNumber = 2;
  private int team_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Team {
    get { return team_; }
    set {
      team_ = value;
    }
  }

  /// <summary>Field number for the "Player" field.</summary>
  public const int PlayerFieldNumber = 3;
  private int player_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Player {
    get { return player_; }
    set {
      player_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (State != other.State) return false;
    if (Team != other.Team) return false;
    if (Player != other.Player) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (State != 0) hash ^= State.GetHashCode();
    if (Team != 0) hash ^= Team.GetHashCode();
    if (Player != 0) hash ^= Player.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (State != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) State);
    }
    if (Team != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Team);
    }
    if (Player != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Player);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (State != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (Team != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
    }
    if (Player != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Player);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerState other) {
    if (other == null) {
      return;
    }
    if (other.State != 0) {
      State = other.State;
    }
    if (other.Team != 0) {
      Team = other.Team;
    }
    if (other.Player != 0) {
      Player = other.Player;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          state_ = (global::PlayerState.Types.State) input.ReadEnum();
          break;
        }
        case 16: {
          Team = input.ReadInt32();
          break;
        }
        case 24: {
          Player = input.ReadInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the PlayerState message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum State {
      [pbr::OriginalName("WAITINGGAME")] Waitinggame = 0,
      [pbr::OriginalName("PLAYING")] Playing = 1,
      [pbr::OriginalName("YOURTURN")] Yourturn = 2,
      [pbr::OriginalName("LEAVE")] Leave = 3,
      [pbr::OriginalName("DEAL")] Deal = 4,
    }

  }
  #endregion

}

/// <summary>
/// Msg encapsulation
/// </summary>
public sealed partial class ServerMsg : pb::IMessage<ServerMsg> {
  private static readonly pb::MessageParser<ServerMsg> _parser = new pb::MessageParser<ServerMsg>(() => new ServerMsg());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServerMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MyReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerMsg(ServerMsg other) : this() {
    typeMessage_ = other.typeMessage_;
    DealWinner = other.dealWinner_ != null ? other.DealWinner.Clone() : null;
    PlayedCard = other.playedCard_ != null ? other.PlayedCard.Clone() : null;
    ActionValidation = other.actionValidation_ != null ? other.ActionValidation.Clone() : null;
    Winner = other.winner_ != null ? other.Winner.Clone() : null;
    DrawCard = other.drawCard_ != null ? other.DrawCard.Clone() : null;
    StackWinner = other.stackWinner_ != null ? other.StackWinner.Clone() : null;
    PlayerState = other.playerState_ != null ? other.PlayerState.Clone() : null;
    PlayerDealed = other.playerDealed_ != null ? other.PlayerDealed.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerMsg Clone() {
    return new ServerMsg(this);
  }

  /// <summary>Field number for the "typeMessage" field.</summary>
  public const int TypeMessageFieldNumber = 1;
  private global::ServerMsg.Types.TypeMessage typeMessage_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServerMsg.Types.TypeMessage TypeMessage {
    get { return typeMessage_; }
    set {
      typeMessage_ = value;
    }
  }

  /// <summary>Field number for the "dealWinner" field.</summary>
  public const int DealWinnerFieldNumber = 2;
  private global::DealWinner dealWinner_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DealWinner DealWinner {
    get { return dealWinner_; }
    set {
      dealWinner_ = value;
    }
  }

  /// <summary>Field number for the "playedCard" field.</summary>
  public const int PlayedCardFieldNumber = 3;
  private global::PlayedCard playedCard_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayedCard PlayedCard {
    get { return playedCard_; }
    set {
      playedCard_ = value;
    }
  }

  /// <summary>Field number for the "actionValidation" field.</summary>
  public const int ActionValidationFieldNumber = 4;
  private global::ActionValidation actionValidation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActionValidation ActionValidation {
    get { return actionValidation_; }
    set {
      actionValidation_ = value;
    }
  }

  /// <summary>Field number for the "winner" field.</summary>
  public const int WinnerFieldNumber = 5;
  private global::GameWinner winner_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GameWinner Winner {
    get { return winner_; }
    set {
      winner_ = value;
    }
  }

  /// <summary>Field number for the "drawCard" field.</summary>
  public const int DrawCardFieldNumber = 6;
  private global::DrawCard drawCard_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DrawCard DrawCard {
    get { return drawCard_; }
    set {
      drawCard_ = value;
    }
  }

  /// <summary>Field number for the "stackWinner" field.</summary>
  public const int StackWinnerFieldNumber = 7;
  private global::StackWinner stackWinner_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StackWinner StackWinner {
    get { return stackWinner_; }
    set {
      stackWinner_ = value;
    }
  }

  /// <summary>Field number for the "playerState" field.</summary>
  public const int PlayerStateFieldNumber = 8;
  private global::PlayerState playerState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerState PlayerState {
    get { return playerState_; }
    set {
      playerState_ = value;
    }
  }

  /// <summary>Field number for the "playerDealed" field.</summary>
  public const int PlayerDealedFieldNumber = 9;
  private global::PlayerDealed playerDealed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerDealed PlayerDealed {
    get { return playerDealed_; }
    set {
      playerDealed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServerMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServerMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TypeMessage != other.TypeMessage) return false;
    if (!object.Equals(DealWinner, other.DealWinner)) return false;
    if (!object.Equals(PlayedCard, other.PlayedCard)) return false;
    if (!object.Equals(ActionValidation, other.ActionValidation)) return false;
    if (!object.Equals(Winner, other.Winner)) return false;
    if (!object.Equals(DrawCard, other.DrawCard)) return false;
    if (!object.Equals(StackWinner, other.StackWinner)) return false;
    if (!object.Equals(PlayerState, other.PlayerState)) return false;
    if (!object.Equals(PlayerDealed, other.PlayerDealed)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TypeMessage != 0) hash ^= TypeMessage.GetHashCode();
    if (dealWinner_ != null) hash ^= DealWinner.GetHashCode();
    if (playedCard_ != null) hash ^= PlayedCard.GetHashCode();
    if (actionValidation_ != null) hash ^= ActionValidation.GetHashCode();
    if (winner_ != null) hash ^= Winner.GetHashCode();
    if (drawCard_ != null) hash ^= DrawCard.GetHashCode();
    if (stackWinner_ != null) hash ^= StackWinner.GetHashCode();
    if (playerState_ != null) hash ^= PlayerState.GetHashCode();
    if (playerDealed_ != null) hash ^= PlayerDealed.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TypeMessage != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) TypeMessage);
    }
    if (dealWinner_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DealWinner);
    }
    if (playedCard_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(PlayedCard);
    }
    if (actionValidation_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(ActionValidation);
    }
    if (winner_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Winner);
    }
    if (drawCard_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(DrawCard);
    }
    if (stackWinner_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(StackWinner);
    }
    if (playerState_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(PlayerState);
    }
    if (playerDealed_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(PlayerDealed);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TypeMessage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TypeMessage);
    }
    if (dealWinner_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DealWinner);
    }
    if (playedCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayedCard);
    }
    if (actionValidation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActionValidation);
    }
    if (winner_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Winner);
    }
    if (drawCard_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrawCard);
    }
    if (stackWinner_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StackWinner);
    }
    if (playerState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerState);
    }
    if (playerDealed_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerDealed);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServerMsg other) {
    if (other == null) {
      return;
    }
    if (other.TypeMessage != 0) {
      TypeMessage = other.TypeMessage;
    }
    if (other.dealWinner_ != null) {
      if (dealWinner_ == null) {
        dealWinner_ = new global::DealWinner();
      }
      DealWinner.MergeFrom(other.DealWinner);
    }
    if (other.playedCard_ != null) {
      if (playedCard_ == null) {
        playedCard_ = new global::PlayedCard();
      }
      PlayedCard.MergeFrom(other.PlayedCard);
    }
    if (other.actionValidation_ != null) {
      if (actionValidation_ == null) {
        actionValidation_ = new global::ActionValidation();
      }
      ActionValidation.MergeFrom(other.ActionValidation);
    }
    if (other.winner_ != null) {
      if (winner_ == null) {
        winner_ = new global::GameWinner();
      }
      Winner.MergeFrom(other.Winner);
    }
    if (other.drawCard_ != null) {
      if (drawCard_ == null) {
        drawCard_ = new global::DrawCard();
      }
      DrawCard.MergeFrom(other.DrawCard);
    }
    if (other.stackWinner_ != null) {
      if (stackWinner_ == null) {
        stackWinner_ = new global::StackWinner();
      }
      StackWinner.MergeFrom(other.StackWinner);
    }
    if (other.playerState_ != null) {
      if (playerState_ == null) {
        playerState_ = new global::PlayerState();
      }
      PlayerState.MergeFrom(other.PlayerState);
    }
    if (other.playerDealed_ != null) {
      if (playerDealed_ == null) {
        playerDealed_ = new global::PlayerDealed();
      }
      PlayerDealed.MergeFrom(other.PlayerDealed);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          typeMessage_ = (global::ServerMsg.Types.TypeMessage) input.ReadEnum();
          break;
        }
        case 18: {
          if (dealWinner_ == null) {
            dealWinner_ = new global::DealWinner();
          }
          input.ReadMessage(dealWinner_);
          break;
        }
        case 26: {
          if (playedCard_ == null) {
            playedCard_ = new global::PlayedCard();
          }
          input.ReadMessage(playedCard_);
          break;
        }
        case 34: {
          if (actionValidation_ == null) {
            actionValidation_ = new global::ActionValidation();
          }
          input.ReadMessage(actionValidation_);
          break;
        }
        case 42: {
          if (winner_ == null) {
            winner_ = new global::GameWinner();
          }
          input.ReadMessage(winner_);
          break;
        }
        case 50: {
          if (drawCard_ == null) {
            drawCard_ = new global::DrawCard();
          }
          input.ReadMessage(drawCard_);
          break;
        }
        case 58: {
          if (stackWinner_ == null) {
            stackWinner_ = new global::StackWinner();
          }
          input.ReadMessage(stackWinner_);
          break;
        }
        case 66: {
          if (playerState_ == null) {
            playerState_ = new global::PlayerState();
          }
          input.ReadMessage(playerState_);
          break;
        }
        case 74: {
          if (playerDealed_ == null) {
            playerDealed_ = new global::PlayerDealed();
          }
          input.ReadMessage(playerDealed_);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ServerMsg message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum TypeMessage {
      [pbr::OriginalName("DEALWINNER")] Dealwinner = 0,
      [pbr::OriginalName("PLAYEDCARD")] Playedcard = 1,
      [pbr::OriginalName("ACTIONVALIDATION")] Actionvalidation = 2,
      [pbr::OriginalName("WINNER")] Winner = 3,
      [pbr::OriginalName("DRAWCARD")] Drawcard = 4,
      [pbr::OriginalName("STACKWINNER")] Stackwinner = 5,
      [pbr::OriginalName("PLAYERSTATE")] Playerstate = 6,
      [pbr::OriginalName("PLAYERDEALED")] Playerdealed = 7,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
